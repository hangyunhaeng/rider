<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ConvInfoDAO">

	<resultMap id="PartInfoVOList" type="egovframework.com.keiti.conv.service.PartInfoVO">
	</resultMap>
	<resultMap id="IoeBdgInfoVOList" type="egovframework.com.keiti.conv.service.IoeBdgInfoVO">
	</resultMap>
	<resultMap id="FndBdgInfoVOList" type="egovframework.com.keiti.conv.service.FndBdgInfoVO">
	</resultMap>
	<resultMap id="ActInfoVOList" type="egovframework.com.keiti.conv.service.ActInfoVO">
	</resultMap>
	<select id="selectPartInfoList" parameterType="map" resultMap="PartInfoVOList">
		SELECT
			TASK_NO,
			NM,
			ENG_NM,
			DECODE(GD,1,'남',2,'여',GD) GD,
			DECODE(IS_MNG,0,'참여연구원',1,'책임자',IS_MNG) IS_MNG,
			DOB,
			EMAIL,
			PHONE,
			PART_STARTDT,
			PART_ENDDT,
			PART_RAT,
			ORG,
			DEPT,
			POS
		FROM
			TP_PART
		WHERE 1=1
			AND TASK_NO = #{taskNo}
		ORDER BY IS_MNG DESC, NM
	</select>

	<select id="selectPartInfoListCnt" parameterType="map" resultType="java.lang.Integer">
			SELECT COUNT(1) CNT
				FROM
				TP_PART
			WHERE 1=1
				AND TASK_NO = #{taskNo}
	</select>
	<select id="selectIoeBdgInfoList" parameterType="map" resultMap="IoeBdgInfoVOList">
		SELECT
			LEVEL ,
			DECODE(LEVEL , 1, G.NM_ABRV, 2, '  '  || G.NM_ABRV, 3, '    '  || G.NM_ABRV) NM_ABRV,
		    DECODE(LEVEL, 1, G.NM_ABRV) BIMOK,
		    DECODE(LEVEL, 2, G.NM_ABRV) SEMOK,
		    DECODE(LEVEL, 3, G.NM_ABRV) "USE",
		    CASE
		        WHEN LEVEL IN (1, 2) THEN
		        (
		        SELECT
		            NVL(SUM(B2.CS_AMT), 0)
		        FROM
		            TP_IOE_CD I2
		        LEFT JOIN TP_IOE_GRP_CD G2 ON
		            I2.IOE_CD = G2.IOE_CD
		        LEFT JOIN TP_TASK_IOE_GRP T2 ON
		            G2.IOE_GRP_CD = T2.IOE_GRP_CD
		        LEFT JOIN TP_BDG B2 ON
		            T2.TASK_NO = B2.TASK_NO
		            AND G2.IOE_GRP_CD = B2.IOE_GRP_CD
		            AND G2.IOE_CD = B2.IOE_CD
		        WHERE
		            I2.IOE_CD IN (
		            SELECT
		                I3.IOE_CD
		            FROM
		                TP_IOE_CD I3
		            START WITH
		                I3.IOE_CD = I.IOE_CD
		            CONNECT BY
		                PRIOR I3.IOE_CD = I3.UP_IOE_CD
		         )
		            AND T2.TASK_NO = T.TASK_NO
		            AND B2.BDG_KND_CD = #{bdgTp}
		            AND I2.SUM_INPT_F = '1'
		        )
		        ELSE NVL(B.CS_AMT, 0)
		    END AS CS_AMT,
		    CASE
		        WHEN LEVEL IN (1, 2) THEN
		        (
		        SELECT
		            NVL(SUM(B2.TH_AMT), 0)
		        FROM
		            TP_IOE_CD I2
		        LEFT JOIN TP_IOE_GRP_CD G2 ON
		            I2.IOE_CD = G2.IOE_CD
		        LEFT JOIN TP_TASK_IOE_GRP T2 ON
		            G2.IOE_GRP_CD = T2.IOE_GRP_CD
		        LEFT JOIN TP_BDG B2 ON
		            T2.TASK_NO = B2.TASK_NO
		            AND G2.IOE_GRP_CD = B2.IOE_GRP_CD
		            AND G2.IOE_CD = B2.IOE_CD
		        WHERE
		            I2.IOE_CD IN (
		            SELECT
		                I3.IOE_CD
		            FROM
		                TP_IOE_CD I3
		            START WITH
		                I3.IOE_CD = I.IOE_CD
		            CONNECT BY
		                PRIOR I3.IOE_CD = I3.UP_IOE_CD
		         )
		            AND T2.TASK_NO = T.TASK_NO
		            AND B2.BDG_KND_CD = #{bdgTp}
		            AND I2.SUM_INPT_F = '1'
		        )
		        ELSE NVL(B.TH_AMT, 0)
		    END AS TH_AMT,
		    CASE
		        WHEN LEVEL IN (1, 2) THEN
		        (
		        SELECT
		            NVL(SUM(NVL(B2.CS_AMT, 0) + NVL(B2.TH_AMT, 0)),0)
		        FROM
		            TP_IOE_CD I2
		        LEFT JOIN TP_IOE_GRP_CD G2 ON
		            I2.IOE_CD = G2.IOE_CD
		        LEFT JOIN TP_TASK_IOE_GRP T2 ON
		            G2.IOE_GRP_CD = T2.IOE_GRP_CD
		        LEFT JOIN TP_BDG B2 ON
		            T2.TASK_NO = B2.TASK_NO
		            AND G2.IOE_GRP_CD = B2.IOE_GRP_CD
		            AND G2.IOE_CD = B2.IOE_CD
		        WHERE
		            I2.IOE_CD IN (
		            SELECT
		                I3.IOE_CD
		            FROM
		                TP_IOE_CD I3
		            START WITH
		                I3.IOE_CD = I.IOE_CD
		            CONNECT BY
		                PRIOR I3.IOE_CD = I3.UP_IOE_CD
		         )
		            AND T2.TASK_NO = T.TASK_NO
		            AND B2.BDG_KND_CD = #{bdgTp}
		            AND I2.SUM_INPT_F = '1'
		        )
		        ELSE NVL(B.CS_AMT, 0) + NVL(B.TH_AMT, 0)
		    END AS TOT_AMT,
		    CASE
		        WHEN COALESCE( TRUNC(
		            (CASE
		                WHEN LEVEL IN (1, 2) THEN
		                (
		                SELECT
		                    NVL(SUM(NVL(B2.CS_AMT, 0) + NVL(B2.TH_AMT, 0)),0)
		                FROM
		                    TP_IOE_CD I2
		                LEFT JOIN TP_IOE_GRP_CD G2 ON
		                    I2.IOE_CD = G2.IOE_CD
		                LEFT JOIN TP_TASK_IOE_GRP T2 ON
		                    G2.IOE_GRP_CD = T2.IOE_GRP_CD
		                LEFT JOIN TP_BDG B2 ON
		                    T2.TASK_NO = B2.TASK_NO
		                    AND G2.IOE_GRP_CD = B2.IOE_GRP_CD
		                    AND G2.IOE_CD = B2.IOE_CD
		                WHERE
		                    I2.IOE_CD IN (
		                    SELECT
		                        I3.IOE_CD
		                    FROM
		                        TP_IOE_CD I3
		                    START WITH
		                        I3.IOE_CD = I.IOE_CD
		                    CONNECT BY
		                        PRIOR I3.IOE_CD = I3.UP_IOE_CD
		                 )
		                    AND T2.TASK_NO = T.TASK_NO
		                    AND B2.BDG_KND_CD = #{bdgTp}
		                    AND I2.SUM_INPT_F = '1'
		                )
		                ELSE NVL(B.CS_AMT, 0) + NVL(B.TH_AMT, 0)
		            END) /
		            NULLIF(SUM(CASE
		                WHEN I.SUM_INPT_F = '1' THEN NVL(B.CS_AMT, 0) + NVL(B.TH_AMT, 0)
		                ELSE 0
		            END) OVER (),0) * 100, 2),0) = 100 THEN '100'
		        ELSE TO_CHAR(
		            COALESCE( TRUNC(
		                (CASE
		                    WHEN LEVEL IN (1, 2) THEN
		                    (
		                    SELECT
		                        NVL(SUM(NVL(B2.CS_AMT, 0) + NVL(B2.TH_AMT, 0)),0)
		                    FROM
		                        TP_IOE_CD I2
		                    LEFT JOIN TP_IOE_GRP_CD G2 ON
		                        I2.IOE_CD = G2.IOE_CD
		                    LEFT JOIN TP_TASK_IOE_GRP T2 ON
		                        G2.IOE_GRP_CD = T2.IOE_GRP_CD
		                    LEFT JOIN TP_BDG B2 ON
		                        T2.TASK_NO = B2.TASK_NO
		                        AND G2.IOE_GRP_CD = B2.IOE_GRP_CD
		                        AND G2.IOE_CD = B2.IOE_CD
		                    WHERE
		                        I2.IOE_CD IN (
		                        SELECT
		                            I3.IOE_CD
		                        FROM
		                            TP_IOE_CD I3
		                        START WITH
		                            I3.IOE_CD = I.IOE_CD
		                        CONNECT BY
		                            PRIOR I3.IOE_CD = I3.UP_IOE_CD
		                     )
		                        AND T2.TASK_NO = T.TASK_NO
		                        AND B2.BDG_KND_CD = #{bdgTp}
		                        AND I2.SUM_INPT_F = '1'
		                    )
		                    ELSE NVL(B.CS_AMT, 0) + NVL(B.TH_AMT, 0)
		                END) /
		                NULLIF(SUM(CASE
		                    WHEN I.SUM_INPT_F = '1' THEN NVL(B.CS_AMT, 0) + NVL(B.TH_AMT, 0)
		                    ELSE 0
		                END) OVER (),0) * 100, 2),0), '90.99')
		    END AS RAT,
		    I.IOE_CD AS "IOE_CD",
		    I.UP_IOE_CD,
		    CONNECT_BY_ROOT I.IOE_CD AS IOE_CD1,
		    CASE
		        WHEN LEVEL = 2 THEN I.IOE_CD
		        WHEN LEVEL = 3 THEN PRIOR I.IOE_CD
		        ELSE NULL
		    END AS IOE_CD2,
		    CASE
		        WHEN LEVEL = 3 THEN I.IOE_CD
		        ELSE NULL
		    END AS IOE_CD3
		FROM
		    TP_IOE_CD I
		LEFT JOIN
		    TP_IOE_GRP_CD G ON
		    I.IOE_CD = G.IOE_CD
		LEFT JOIN
		    TP_TASK_IOE_GRP T ON
		    G.IOE_GRP_CD = T.IOE_GRP_CD
		    AND T.TASK_NO = #{taskNo}
		LEFT JOIN
		    TP_BDG B ON
		    T.TASK_NO = B.TASK_NO
		    AND G.IOE_GRP_CD = B.IOE_GRP_CD
		    AND G.IOE_CD = B.IOE_CD
		    AND B.BDG_KND_CD = #{bdgTp}
		WHERE 1=1
			AND I.IOE_CD != 'CMXXXXXX'
			AND T.TASK_NO = #{taskNo}
		START WITH
		    I.UP_IOE_CD IS NULL
		CONNECT BY
		    PRIOR I.IOE_CD = I.UP_IOE_CD
		ORDER BY
		    TO_NUMBER(G.LUP_N), IOE_CD

	</select>
	<select id="selectFndBdgInfoList" parameterType="map" resultMap="FndBdgInfoVOList">
	SELECT TASK_NO
		,FND_TP
		, DECODE(FND_TP,'01','정부출연금','05','기업체부담금') AS FND_TP_NM
		, CASH
		, NON_CASH
		,TOT
	FROM TP_FND_BDG
	WHERE 1=1
	AND TASK_NO = #{taskNo}
	ORDER BY FND_TP
	</select>
	<select id="selectActInfoList" parameterType="map" resultMap="ActInfoVOList">
	SELECT TASK_NO,ACT_TP,BNK_NM,ACT_NO,ACT_NM
	FROM TP_ACT
	WHERE 1=1
	AND TASK_NO = #{taskNo}
	ORDER BY ACT_TP
	</select>

</mapper>